#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <string.h>

#define SIZE 1000
#define UNDERFLOW_CHAR '\0'

typedef enum
{
	NO = 0,
	YES = 1,
} BOOL;

BOOL isStackFull (int tos)
{
	if (tos == SIZE - 1)
		return YES;
	return NO;
}

BOOL isStackEmpty (int tos)
{
	if (tos == -1)
		return YES;
	return NO;
}

void push (char *stack, char item, int *tos)
{
	if (*tos == SIZE - 1)
		return;
	(*tos) += 1;
	*(stack + (*tos)) = item;
}

char pop (char *stack, int *tos)
{
	if (*tos == -1)
		return UNDERFLOW_CHAR;
	return *(stack + ((*tos)--));
}

void reverse (char *stack, int tos)
{
	int i;
	for (i = 0; i <= tos/2; ++i)
	  {
		char ch = *(stack + i);
		*(stack + i) = *(stack + tos - i);
		*(stack + tos - i) = ch;
	}
}


int indexOf (char character, char *string)
{
	char *ptr = strchr(string, character);
	if (ptr)
		return (int)(ptr - string);
	return -1;
}


BOOL isOperator (char op)
{
	if (indexOf(op, "+-*/") != -1)
		return YES;
	return NO;
}

BOOL isOperand (char op)
{
	if ((op >= 65 && op <= 90) || (op >= 97 && op <= 122))
		return YES;
	if (op >= 48 && op <= 57)
		return YES;
	return NO;
}

int operatorPrecedence (char op)
{
	if (indexOf(op, ")]}") != -1) return 0;
	else if (indexOf(op, "+-") != -1) return 1;
	else if (indexOf(op, "*/") != -1) return 2;
	return -1;
}


char * toPrefix (char * exp)
{
	
	int tosp = -1;
	char *prefix = (char *)calloc(SIZE, sizeof(char));
	int toso = -1;
	char *operator = (char *)calloc(SIZE, sizeof(char));
	
	int l = (int)strlen(exp);
	int i;
	
	for (i = l - 1; i >= 0; --i)
	  {
		char z = *(exp + i);
		
		if (isOperand(z))
			push(prefix, z, &tosp);
		
		else if (operatorPrecedence(z) == 0)
			push(operator, z, &toso);
		
		else if (isOperator(z))
		  {
			while (!isStackEmpty(toso) && operatorPrecedence(z) < operatorPrecedence(*(operator + toso)))
			  {
				char op =  pop(operator, &toso);
				if (isOperator(op))
					push(prefix, op, &tosp);
			}
			push(operator, z, &toso);
		}
		
		else if (indexOf(z, "([{") != -1)
		  {
			while (operatorPrecedence(*(operator + toso)) != 0)
				push(prefix, pop(operator, &toso), &tosp);
			pop(operator, &toso);
		}
		
		else
			continue;
		
	}
	
	while(!isStackEmpty(toso))
		push(prefix, pop(operator, &toso), &tosp);
	
	reverse(prefix, tosp);
	return prefix;
}

int main()
{
	
	char *infix = (char *)calloc(SIZE, sizeof(char));
	
	printf("Enter parenthesized Infix expression : ");
	fgets(infix, SIZE, stdin);
	
	char *prefix = toPrefix(infix);
	
	printf("Infix: %s\nPrefix: %s\n", infix, prefix);
	
	return 0;
}
