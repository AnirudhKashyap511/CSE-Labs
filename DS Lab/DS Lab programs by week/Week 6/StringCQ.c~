#include<stdio.h>

# define SIZE 100

typedef struct
{
  int arr[SIZE][SIZE];
  int f, r;
} CQ;

int isCQFull (CQ cq1)
{
  if ((cq1.r++) % SIZE == 1)
    return 1;
  return 0;
}

int isCQEmpty (CQ cq1)
{
  if (cq1.f == -1 && cq1.r == -1)
    return 1;
  return 0;
}

void CQinsert (CQ cq1, char ele[])
{
  if (isCQFull == 0)
    {
      if (cq1.f == -1)
	cq1.f = 0;
      cq1.r = (cq1.r+1) % SIZE;
      cq1.arr[cq1.r] = ele;
    }
}

void CQdelete (CQ cq1)
{
  char ele[SIZE];
  if (isCQEmpty == 0)
    {
      if (cq1.f == cq1.r)
	{
	  printf("Deleted string is %s\n",cq1.arr[cq1.f]); 
	  cq1.f = cq1.r = -1;
	}
      else
	{
	  printf("Deleted string is %s\n", cq1.arr[cq1.f]);
	  cq1.f = (cq1.f + 1) % SIZE;
	}
    }

    printf("Now the circular queue is\n");
    //display();
}

int main()
{
  CQ cq;
  int choice;
  do
  {
    printf("1 to insert, 2 to delete, 3 to display, 4 to exit\n");
    scanf("%d",&choice);
    switch (choice)
    {
      case 1:
	char ele[SIZE];
	printf("Enter element to be inserted");
	scanf("%s", ele);
	CQinsert (cq, ele[]);
      case 2:
	CQdelete (cq);
      case 3:
	printf("Write display fn\n");
        //display();
      case 4:
        break;
    }
  } while (choice == 1 || choice == 2 || choice == 3);
  return 0;
}
